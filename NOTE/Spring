Spring

- 라이브러리: 연관 클래스 및 인터페이스 묶음, 구현 객체가 프로그램 제어 흐름 조종(new)
- 프레임워크: 정형화(원칙 및 구조)된 라이브러리, 외부(AppConfig)에서 프로그램 제어 흐름 관리(IoC: Inversion of Control, 제어 역전)

- 추상화: 공통성과 본질을 모아 추출, 즉, 객체의 공통 속성과 기능을 추출하여 정의하는 것
- 상속: 기존 클래스를 재활용하여 새 클래스를 작성하는 것
- 다형성: 어떤 객체의 속성이나 기능이 맥락에 따라 다른 역할을 수행할 수 있는 특성, 오버라이딩(피상속 메소드 사용 및 변경) 및 오버로딩(새 메소드 정의) 등, 구체화, 역할(인터페이스(다중 상속 가능))과 구현(클래스, 객체)의 분리, 클라이언트를 변경하지 않고 서버 구현 기능을 유연하게 변경할 수 있다는 것이 본질
- 캡슐화: 클래스의 속성과 기능을 외부로부터 보호하고, 필요한 부분만 외부 노출하여 고유 독립성과 책임 영역을 보호, 접근 제어자와 비슷함

- SOLID
- - SRP: Single Responsibility Principle, 단일 책임 원칙, 변경 사항의 파급 효과가 적어야 함
- - OCP: Open Closed Principle, 개방 폐쇄 원칙, 확장에는 열려있고 변경에는 닫혀있어야 함, 다형성
- - LSP: Liskov Subsititution Principle. 리스코프 치환 원칙, 컴파일을 넘어서 하위 클래스는 인터페이스 규약을 지켜야 한다는 다형성 원칙
- - ISP: Interface Segregation Principle, 인터페이스 분리 원칙, 명확하고 대체 가능성이 높은 인터페이스로 (여러 개) 분리
- - DIP: Dependency Inversion Principle, 의존관계(상->하) 역전(하->상) 원칙, 구체화(클래스, 구현)가 아닌 추상화(인터페이스, 역할)에 의존해야 함, 추상성이 높은 클래스(인터페이스)와 통신, 하위 클래스를 직접 가져다 쓰지 말 것

- 정적 의존 관계: import로 판단 가능, 실행없이 분석 가능
- 동적 의존 관계: 실행 시점에 객체 생성 및 참조값 전달하여 연결, 의존 관계 주입(DI: Dependency Injection,  의존관계 주입 시 정적 클래스 의존관계를 변경하지 않고 동적 객체 의존 관계를 쉽게 변경할 수 있다

- IoC 컨테이너: 객체 생성 관리 및 의존관계 주입, 의존 관계 초점인 경우 DI컨테이너라고도 함, 어셈블러 또는 오브젝트 팩토리 등으로 불리기도 함

.
.
.

- 뷰 템플릿: HTML을 동적으로 생성하는 용도, 뷰 템플릿을 거쳐서 HTML이 생성되고 뷰가 응답을 만들어서 전달, 웹 클라이언트 기술
- - 서버 사이드 템플릿(SSR): JSP, Thymeleaf, velocity, freemarker
- - 클라이언트 사이드 템플릿(CSR): JS, Ajax, JQuery, React, Vuejs, angularJS, Bootstrap
- HTTP API: HTTP 메시지 바디, JSON/XML/TEXT

- model 객체: 애플리케이션 데이터를 뷰로 전달
